#!/usr/bin/perl
# maybe use warnings FATAL => 'all';

# TODO
# * add errout()
# * create tests which could fix dumb errors

use Modern::Perl'2014';our$VERSION='v0.1.4';package ConvertWiki{use Carp;use Data::Dumper;use Hash::Util qw(lock_keys);our$VAR1;my$DEBUG=0;

my @keys = qw( argv switches wiki_input mmd_input input_file );

sub run {
    my ( $self, @argv ) = @_;

    $self->{argv} = \@argv;

    $self->check_inputs();

    if ( $self->{wiki_input} ) {
        $self->convert_from_wiki();
    }
    else {
        $self->convert_from_mmd();
    }
    return 0; # return for entire script template
}

sub check_inputs {
    my ($self) = @_;
    my %valid_switch = (
        '-w' => 'wiki_input',
        '-m' => 'mmd_input',
    );
    while (my $arg = shift(@{$self->{argv}})) {
        if ( $arg =~ /^(-.*)/ ) {
            my $switch = $1;
            if ( $switch eq '-?' or $switch eq '-h' or $switch eq '--help' )  {
                 print STDERR $self->usage();
                 exit 2;
            }
            if ( !$valid_switch{$switch} )  {
                $self->errout("bad switch $switch");
            }
            $self->{$valid_switch{$switch}}++;
        }
        else {
            if ( @{$self->{argv}} > 0 )  {
                $self->errout(message=>"too many input files", no_usage => 1);
            }
            if ( ! -r $arg ) {
                $self->errout(message=>"can't read file \"$arg\"", no_usage => 1);
            }
            $self->{input_file} = $arg;
            last;
        }
    }
    if (( !$self->{wiki_input} and !$self->{mmd_input} ) or
        ( $self->{wiki_input} and $self->{mmd_input} )) {
        $self->errout("must use either -w or -m");
    }
}

sub convert_from_wiki {
    my ($self) = @_;

    my $ifh = IO::File->new($self->{input_file}, '<');
    die if (!defined $ifh);

    while(my $line = <$ifh>) {
        my $after = '';
        chomp $line;
        if ( $line =~ /^    / ) {
            $after = $line;
        }
        elsif ( $line =~ /^(\s*)(=+)([^=]+)(=+)(\s*)$/ ) {
            my $start_space  = $1;
            my $start_header = $2;
            my $header       = $3;
            my $end_header   = $4;
            my $end_space    = $5;
            for ( $start_header, $end_header ) {
                s/=/#/g;
            }
            $after = "$start_space$start_header$header$end_header$end_space";
#            print "1: $line\n";
#            print "2: $after\n";
        }
        elsif ( $line =~ /^(\s*)\|\|=?(\s+.*\s+)=?\|\|(\s*)$/ ) {
            my $start_space  = $1;
            my $content      = $2;
            my $end_space    = $3;
            $content =~ s/=?\|\|=?/|/g;
            my $nextline = '';
            if ( $line =~ /=\|/ or $line =~ /\|=/ ) {
                my $title = "$start_space$content$end_space";
                my $undertitle = $title;
                $undertitle =~ s/ \| /- | -/g;
                $undertitle =~ s/[^\s|]/-/g;
                $after .= "$title\n$undertitle";
            }
            else {
                $after = "$start_space$content$end_space$nextline";
            }
#            print "|1: $line\n";
#            print "|2: $after\n";
#(vim_please_jump_to_this_location
#  ||= words words words =||= words words words =||= words words words =||
#  || words words words   ||  words words words  || words words words   ||
#  words words words | words words words  | words words words
#  ----------------- | ------------------ | -----------------
#  words words words |  words words words | words words words
        }
        else {
            $after = $line;
        }
        print "$after\n";
    }
    $ifh->close;
}

sub convert_from_mmd {
    my ($self) = @_;

    my $ifh = IO::File->new($self->{input_file}, '<');
    die if (!defined $ifh);

    while(<$ifh>) {
        chomp;
        print "*** l: $_\n";
    }
    $ifh->close;
}

sub usage {
    my ($self) = @_;

    return <<EOF;
Usage: convert_wiki [OPTION] [FILE]
Convert from Wiki to MultiMarkdown and vice-versa
Example: convert_wiki -w menu.wiki

  -w input file is Wiki markup
  -m input file is MultiMarkdown
EOF
}

sub errout {
    my $self = shift;
    my %params;
    if ( @_ == 1 ) {
        $params{message} = $_[0];
    }
    else {
        %params = @_;
    }
    my $message = "error: $params{message}\n";
    if ( !$params{no_usage} ) {
        $message .= $self->usage();
    }
    die $message;
}

# ================== END MAIN =================================================

    sub new {
        my ($class) = @_;

        my $self = {};
        bless $self, $class;
        lock_keys( %$self, @keys );

        return $self;
    }

    sub thaw {
        my ( $self, $filename ) = @_;
        if ( !ref($self) ) {
            $filename = $self;
        }

        my $ifh = IO::File->new( $filename, '<' );
        return if ( !defined $ifh );

        my $contents = do { local $/; <$ifh> };
        $ifh->close;

        return eval $contents;
    }

    sub freeze {
        my ( $self, $filename, $ref ) = @_;

        my $ofh = IO::File->new( $filename, '>' );
        croak "Failed to open output file: $!" if ( !defined $ofh );

        print $ofh Dumper($ref);
        $ofh->close;
    }

}

package main;

my $app = ConvertWiki->new();
exit $app->run(@ARGV);

=head

= words words words =     ------>   # words words words #
== words words words ==   ------>   ## words words words ##

  ||= words words words =||= words words words =||= words words words =||
  || words words words   ||  words words words  || words words words   ||
  words words words | words words words  | words words words
  ----------------- | ------------------ | -----------------
  words words words |  words words words | words words words

  NOTES: avoid code, look for indent > 4 spaces
  otherwise $a == $b might trigger something


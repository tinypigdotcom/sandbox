<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Fri Apr 10 11:35:08 2015 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>highlight.js</title>
<style type="text/css">
<!--
body {
  color: #F0F0F0;
  background: #600;
  margin: 0 auto;
  width: 52em;
  font-family: PT Sans, DejaVu Sans, Arial, sans;
}

.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  background: #000;
  color: #f8f8f8;
  -webkit-text-size-adjust: none;
}

.hljs-comment {
  color: #aeaeae;
  font-style: italic;
}

.hljs-keyword {
  color: #e28964;
}

.hljs-sub .hljs-keyword {
  color: #99cf50;
}

.hljs-string {
  color: #65b042;
}

.hljs-regexp {
  color: #e9c062;
}

.hljs-number {
  color: #3387cc;
}

.hljs-variable {
  color: #3e87e3;
}



[X] perltidy /* comment */           -->           .hljs-comment
[X] perltidy /* comma *              -->           (nothing)
[X] perltidy /* colon */             -->           (nothing)
[X] perltidy /* here-doc-target */   -->           
[X] perltidy /* here-doc-text */     -->           
[X] perltidy /* identifier */        -->           .hljs-variable
[X] perltidy /* label */             -->           
[X] perltidy /* keyword */           -->           .hljs-keyword
[ ] perltidy /* subroutine */        -->           (nothing)
[ ] perltidy /* numeric */           -->           .hljs-number
[ ] perltidy /* paren */             -->           (nothing)
[ ] perltidy /* pod-text */          -->           ?
[ ] perltidy /* punctuation */       -->           (nothing)
[ ] perltidy /* quote */             -->           .hljs-string
[ ] perltidy /* quote */             -->           .hljs-regexp
[ ] perltidy /* structure */         -->           (nothing)
[ ] perltidy /* semicolon */         -->           (nothing)
[ ] perltidy /* v-string */          -->           
[ ] perltidy /* bareword */          -->           (nothing)


.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.p  { color: #000000;} /* paren */
.pu { color: #000000;} /* punctuation */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.w  { color: #000000;} /* bareword */








.c  { color: #228B22;} /* comment */
.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.h  { color: #CD5555; font-weight:bold;} /* here-doc-target */
.hh { color: #CD5555; font-style:italic;} /* here-doc-text */
.i  { color: #00688B;} /* identifier */
.j  { color: #CD5555; font-weight:bold;} /* label */
.k  { color: #8B008B; font-weight:bold;} /* keyword */
.m  { color: #FF0000; font-weight:bold;} /* subroutine */
.n  { color: #B452CD;} /* numeric */
.p  { color: #000000;} /* paren */
.pd { color: #228B22; font-style:italic;} /* pod-text */
.pu { color: #000000;} /* punctuation */
.q  { color: #CD5555;} /* quote */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.v  { color: #B452CD;} /* v-string */
.w  { color: #000000;} /* bareword */

-->
</style>
</head>
<body>
<pre>
<code class="perl hljs">
<span class="hljs-comment"># loads object </span>
<span class="hljs-sub"><span class="hljs-keyword">sub</span> <span class="hljs-keyword"></span>load
{</span>
  <span class="hljs-keyword">my</span> <span class="hljs-variable">$flds</span> = <span class="hljs-variable">$c</span>->db_load(<span class="hljs-variable">$id</span>,<span class="hljs-variable">@_</span>) || <span class="hljs-keyword">do </span>{
    Carp::carp <span class="hljs-string">"Can`t load (class: <span class="hljs-variable">$c</span>, id: <span class="hljs-variable">$id</span>): '<span class="hljs-variable">$!</span>'"</span>; <span class="hljs-keyword">return </span><span class="hljs-keyword">undef </span>
  };
  <span class="hljs-keyword">my </span><span class="hljs-variable">$o </span>= <span class="hljs-variable">$c</span>->_perl_new();
  <span class="hljs-variable">$id12 </span>= <span class="hljs-variable">$id </span>/ <span class="hljs-number">24 </span>/ <span class="hljs-number">3600</span>;
  <span class="hljs-variable">$o</span>->{<span class="hljs-string">'ID'</span>} = <span class="hljs-variable">$id12 </span>+ <span class="hljs-number">123</span>;
  <span class="hljs-comment">#$o->{'SHCUT'} = $flds->{'SHCUT'}; </span>
  <span class="hljs-keyword">my </span><span class="hljs-variable">$p </span>= <span class="hljs-variable">$o</span>->props;
  <span class="hljs-keyword">my </span><span class="hljs-variable">$vt</span>;
  <span class="hljs-variable">$string </span>=~ <span class="hljs-regexp">m/^sought_text$/</span>;
  <span class="hljs-variable">$items </span>= <span class="hljs-keyword">split </span><span class="hljs-regexp">//</span>, <span class="hljs-string">'abc'</span>;
  <span class="hljs-variable">$string </span>//= <span class="hljs-string">"bar"</span>;
  <span class="hljs-keyword">for </span><span class="hljs-keyword">my </span><span class="hljs-variable">$key </span>(<span class="hljs-keyword">keys </span><span class="hljs-variable">%$</span>p)
  {
    <span class="hljs-keyword">if </span>(${<span class="hljs-variable">$vt</span>.<span class="hljs-string">'::property'</span>}) {
      <span class="hljs-variable">$o</span>->{<span class="hljs-variable">$key </span>. <span class="hljs-string">'_real'</span>} = <span class="hljs-variable">$flds</span>->{<span class="hljs-variable">$key</span>};
      <span class="hljs-keyword">tie </span><span class="hljs-variable">$o</span>->{<span class="hljs-variable">$key</span>}, <span class="hljs-string">'CMSBuilder::Property'</span>, <span class="hljs-variable">$o</span>, <span class="hljs-variable">$key</span>;
    }
  }
  <span class="hljs-variable">$o</span>->save <span class="hljs-keyword">if </span><span class="hljs-keyword">delete </span><span class="hljs-variable">$o</span>->{<span class="hljs-string">'_save_after_load'</span>};

  <span class="hljs-comment"># GH-117 </span>
  <span class="hljs-keyword">my </span><span class="hljs-variable">$g </span>= <span class="hljs-keyword">glob</span>(<span class="hljs-string">"/usr/bin/*"</span>);

  <span class="hljs-keyword">return </span><span class="hljs-variable">$o</span>;
}
<span class="hljs-comment">
=head1 NAME
POD till the end of file
</span>
</code>
</pre>
</body>
</html>












<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Fri Apr 10 22:10:40 2015 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>hljs.pl</title>
<style type="text/css">
<!--
/* default style sheet generated by perltidy */
body {background: #FFFFFF; color: #000000}
pre { color: #000000; 
      background: #FFFFFF;
      font-family: courier;
    } 


.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.p  { color: #000000;} /* paren */
.pu { color: #000000;} /* punctuation */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.w  { color: #000000;} /* bareword */




.c  { color: #228B22;} /* comment */
.cm { color: #000000;} /* comma */
.co { color: #000000;} /* colon */
.h  { color: #CD5555; font-weight:bold;} /* here-doc-target */
.hh { color: #CD5555; font-style:italic;} /* here-doc-text */
.i  { color: #00688B;} /* identifier */
.j  { color: #CD5555; font-weight:bold;} /* label */
.k  { color: #8B008B; font-weight:bold;} /* keyword */
.m  { color: #FF0000; font-weight:bold;} /* subroutine */
.n  { color: #B452CD;} /* numeric */
.p  { color: #000000;} /* paren */
.pd { color: #228B22; font-style:italic;} /* pod-text */
.pu { color: #000000;} /* punctuation */
.q  { color: #CD5555;} /* quote */
.s  { color: #000000;} /* structure */
.sc { color: #000000;} /* semicolon */
.v  { color: #B452CD;} /* v-string */
.w  { color: #000000;} /* bareword */
-->
</style>
</head>
<body>
<a name="-top-"></a>
<h1>hljs.pl</h1>
<!-- BEGIN CODE INDEX --><a name="code-index"></a>
<ul>
<li><a href="#load-">package main</a>
<ul>
<li><a href="#load-">load</a></li>
</ul>
</li>
<li><a href="#EOF-">EOF</a></li>
</ul>
<!-- END CODE INDEX -->
<hr />
<!-- contents of filename: hljs.pl -->
<pre>
<span class="c"># loads object</span>
<a name="load-"></a><span class="k">sub </span><span class="m">load</span> <span class="s">{</span>
    <span class="k">my</span> <span class="i">$flds</span> = <span class="i">$c</span><span class="i">-&gt;db_load</span><span class="s">(</span> <span class="i">$id</span><span class="cm">,</span> <span class="i">@_</span> <span class="s">)</span> || <span class="k">do</span> <span class="s">{</span>
        <span class="w">Carp::carp</span> <span class="q">&quot;Can`t load (class: $c, id: $id): &#39;$!&#39;&quot;</span><span class="sc">;</span>
        <span class="k">return</span> <span class="k">undef</span><span class="sc">;</span>
    <span class="s">}</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$o</span> = <span class="i">$c</span><span class="i">-&gt;_perl_new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
    <span class="i">$id12</span> = <span class="i">$id</span> / <span class="n">24</span> / <span class="n">3600</span><span class="sc">;</span>
    <span class="i">$o</span>-&gt;{<span class="q">&#39;ID&#39;</span>} = <span class="i">$id12</span> + <span class="n">123</span><span class="sc">;</span>

    <span class="c">#$o-&gt;{&#39;SHCUT&#39;} = $flds-&gt;{&#39;SHCUT&#39;};</span>
    <span class="k">my</span> <span class="i">$p</span> = <span class="i">$o</span><span class="i">-&gt;props</span><span class="sc">;</span>
    <span class="k">my</span> <span class="i">$vt</span><span class="sc">;</span>
    <span class="i">$string</span> =~ <span class="q">m/^sought_text$/</span><span class="sc">;</span>
    <span class="i">$items</span> = <span class="k">split</span> <span class="q">//</span><span class="cm">,</span> <span class="q">&#39;abc&#39;</span><span class="sc">;</span>
    <span class="i">$string</span> //= <span class="q">&quot;bar&quot;</span><span class="sc">;</span>
    <span class="k">for</span> <span class="k">my</span> <span class="i">$key</span> <span class="s">(</span> <span class="k">keys</span> <span class="i">%$p</span> <span class="s">)</span> <span class="s">{</span>
        <span class="k">if</span> <span class="s">(</span> <span class="i">$</span>{ <span class="i">$vt</span> . <span class="q">&#39;::property&#39;</span> } <span class="s">)</span> <span class="s">{</span>
            <span class="i">$o</span>-&gt;{ <span class="i">$key</span> . <span class="q">&#39;_real&#39;</span> } = <span class="i">$flds</span>-&gt;{<span class="i">$key</span>}<span class="sc">;</span>
            <span class="k">tie</span> <span class="i">$o</span>-&gt;{<span class="i">$key</span>}<span class="cm">,</span> <span class="q">&#39;CMSBuilder::Property&#39;</span><span class="cm">,</span> <span class="i">$o</span><span class="cm">,</span> <span class="i">$key</span><span class="sc">;</span>
        <span class="s">}</span>
    <span class="s">}</span>
    <span class="i">$o</span><span class="i">-&gt;save</span> <span class="k">if</span> <span class="k">delete</span> <span class="i">$o</span>-&gt;{<span class="q">&#39;_save_after_load&#39;</span>}<span class="sc">;</span>

    <span class="c"># GH-117</span>
    <span class="k">my</span> <span class="i">$g</span> = <span class="k">glob</span><span class="s">(</span><span class="q">&quot;/usr/bin/*&quot;</span><span class="s">)</span><span class="sc">;</span>

    <span class="k">return</span> <span class="i">$o</span><span class="sc">;</span>
<span class="s">}</span>

<a name="EOF-"></a></pre>
</body>
</html>




